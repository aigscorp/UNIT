<?php
/**
 * Created by PhpStorm.
 * User: home
 * Date: 28.08.2021
 * Time: 14:20
 */

namespace App\Pages;

class ComponentMaster extends \App\Pages\ComponentProd
{
    public function __construct($id)
    {
        parent::__construct($id);
    }

    public function getContent($attributes)
    {
        $arr = $this->value;
//        var_dump($arr);
        $brr[] = $arr->list_typework;
        $srr = $arr->list_typework;

        $sz = count($arr->list_typework);
        foreach ($arr->masters as $master){
            $crr = array_fill(0, $sz, "");
            $crr[0] = $master->emp_name;

            for($i = 1; $i < $sz; $i++){
                foreach ($master->typework as $key=>$val){
                    if($key == $arr->list_typework[$i]){
                        $crr[$i] = $val;
                    }
                }
            }
            $brr[] = $crr;
        }
        $defect = $arr->defect;
        $colors = [];
        $list_defect_work = [];

        foreach ($defect as $def){
            $list_defect_work[] = $def->work;
        }
        $defect_work = array_unique($list_defect_work);
        foreach ($defect_work as $df){
            $x = 0; $y = 0;
            for($j = 1; $j < count($brr[0]); $j++){
                if($brr[0][$j] == $df){
                    $y = $j;
                    break;
                }
            }
            if($y != 0){
                for($i = 1; $i < count($brr[$i]); $i++){
                    if(is_numeric($brr[$i][$y]) == true){
                        $colors[] = [$i, $y];
                    }
                }
            }
        }
        $this->str = "";
        $unpack = [];
        $areas = $arr->areas;
        for($p = 0; $p < count($srr); $p++){
            $unpack[] = $srr[$p][0];
            $emps = [];
            for($i = 1; $i < count($srr[$p]); $i++) {
                for ($j = 0; $j < count($srr[$p][$i]); $j++) {
                    $is_emp = false;
                    for($l = 0; $l < count($emps); $l++){
                        if($emps[$l] == $srr[$p][$i][$j][0]){
                            $is_emp = true;
                            break;
                        }
                    }
                    if($is_emp == false){
                        $emps[] = $srr[$p][$i][$j][0];
                    }
                }
            }

            $col_work = count($srr[$p]) - 1;
            for($m = 0; $m < count($emps); $m++){
                $prr = [];
                $prr[] = $emps[$m];
                for($d = 0; $d < $col_work; $d++){
                    $prr[] = "";
                }
                $unpack[] = $prr;
            }
            for($ii = 1; $ii < count($srr[$p]); $ii++){
                for($jj = 0; $jj < count($srr[$p][$ii]); $jj++){
                    for($n = 1; $n < count($unpack); $n++){
                        if($srr[$p][$ii][$jj][0] == $unpack[$n][0]){
                            $unpack[$n][$ii] = $srr[$p][$ii][$jj][1];
                        }
                    }
                }
            }
            $row = count($unpack);
            $col = count($unpack[0]);
            $this->str .= $this->createTable($row, $col, $unpack, "0", "master", $areas[$p], $colors);
            $unpack = [];
        }

        return $this->str;
        //return parent::getContent($attributes); // TODO: Change the autogenerated stub
    }
}